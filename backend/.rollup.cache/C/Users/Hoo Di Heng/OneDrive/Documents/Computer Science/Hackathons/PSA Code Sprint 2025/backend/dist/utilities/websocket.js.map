{"version":3,"file":"websocket.js","sourceRoot":"","sources":["../../utilities/websocket.ts"],"names":[],"mappings":"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","sourcesContent":["import http from \"http\";\r\nimport { WebsocketCloseCode } from \"@common/constants/statusCode.js\";\r\nimport { WebsocketMessage } from \"@common/types/http.js\";\r\nimport config from \"config\";\r\nimport createDebug from \"debug\";\r\nimport { Express } from \"express\";\r\nimport WebSocket, { WebSocketServer } from \"ws\";\r\nimport authService from \"../services/auth.js\";\r\nimport userService from \"../services/user.js\";\r\nimport User from \"../models/user.js\";\r\n\r\nconst wsDebug = createDebug(\"websocket\");\r\nconst wsStartupDebug = createDebug(\"websocket:startup\");\r\nclass WebsocketService {\r\n\tprivate backendWSS: WebSocketServer | null = null;\r\n\tprivate frontendWS = new Map<string, WebSocket>(); // userID - frontend websocket\r\n\r\n\tinit(app: Express) {\r\n\t\tif (this.backendWSS) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst server = http.createServer(app);\r\n\t\tconst backendWSS = new WebSocketServer({ server, path: \"/api\" });\r\n\r\n\t\tbackendWSS.on(\"connection\", async (frontendWS, req) => {\r\n\t\t\tconst url = new URL(req.url ?? \"\", `http://${req.headers.host}`);\r\n\t\t\tconst accessToken = url.searchParams.get(\"X-Access-Token\");\r\n\r\n\t\t\tif (!accessToken) {\r\n\t\t\t\tfrontendWS.close(\r\n\t\t\t\t\tWebsocketCloseCode.MissingAccessToken,\r\n\t\t\t\t\t\"Missing access token\"\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst payload = await authService.validateAccessToken(accessToken);\r\n\r\n\t\t\tif (!payload) {\r\n\t\t\t\tfrontendWS.close(\r\n\t\t\t\t\tWebsocketCloseCode.InvalidAccessToken,\r\n\t\t\t\t\t\"Invalid access token\"\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst user = await User.findById(payload.id).exec();\r\n\t\t\tif (!user) {\r\n\t\t\t\tfrontendWS.close(\r\n\t\t\t\t\tWebsocketCloseCode.NotFound,\r\n\t\t\t\t\t\"User does not exist\"\r\n\t\t\t\t);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\twsDebug(`New client connected: ${user.email}`);\r\n\t\t\tthis.frontendWS.set(payload.id, frontendWS);\r\n\t\t\tthis.sendTo(payload.id, {\r\n\t\t\t\ttype: \"NOTIFICATIONS\",\r\n\t\t\t\tdata: user.notifications,\r\n\t\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\t});\r\n\t\t\tfrontendWS.on(\"message\", (message) => {\r\n\t\t\t\twsDebug(`Received message from ${payload.id}: ${message}`);\r\n\t\t\t});\r\n\t\t\tfrontendWS.on(\"close\", () => {\r\n\t\t\t\twsDebug(`Client disconnected: ${payload.id}`);\r\n\t\t\t\tthis.frontendWS.delete(payload.id);\r\n\t\t\t});\r\n\t\t});\r\n\t\tthis.backendWSS = backendWSS;\r\n\t\tconst url = `${\r\n\t\t\tconfig.get(\"NODE_ENV\") === \"production\" ? \"wss\" : \"ws\"\r\n\t\t}://${config.get(\"HOST\")}/api`;\r\n\t\twsStartupDebug(`WebSocket server is running at ${url}`);\r\n\t\treturn server;\r\n\t}\r\n\r\n\tdisconnect() {\r\n\t\tthis.backendWSS?.close();\r\n\t}\r\n\r\n\t// Broadcast to all clients\r\n\tbroadcast(message: WebsocketMessage) {\r\n\t\tthis.frontendWS.forEach((ws) => {\r\n\t\t\tif (ws.readyState === WebSocket.OPEN) {\r\n\t\t\t\tws.send(JSON.stringify(message));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Send to specific client by JWT\r\n\tsendTo(token: string, message: WebsocketMessage) {\r\n\t\tconst ws = this.frontendWS.get(token);\r\n\t\tif (ws && ws.readyState === WebSocket.OPEN) {\r\n\t\t\tws.send(JSON.stringify(message));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getTokenFromRequest(req: import(\"http\").IncomingMessage) {\r\n\t\t// Example: extract JWT from query params: ws://host?token=...\r\n\t\tconst url = new URL(req.url ?? \"\", `http://${req.headers.host}`);\r\n\t\treturn url.searchParams.get(\"token\") || undefined;\r\n\t}\r\n}\r\n\r\nconst websocketService = new WebsocketService();\r\nexport default websocketService;\r\n"]}