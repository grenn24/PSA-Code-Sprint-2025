{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../services/auth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,IAAI,MAAM,mBAAmB,CAAC;AACrC,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,GAAG,MAAM,cAAc,CAAC;AAC/B,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,WAAW;IAChB,KAAK,CAAC,KAAK,CAAC,KAAa,EAAE,QAAgB;QAC1C,wBAAwB;QACxB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,WAAW,EAAE,EAAE,CAAC;aAC7D,QAAQ,CAAC,YAAY,CAAC;aACtB,QAAQ,CAAC,cAAc,CAAC;aACxB,QAAQ,CAAC,SAAS,CAAC;aACnB,QAAQ,CAAC,SAAS,CAAC;aACnB,QAAQ,CAAC,2BAA2B,CAAC;aACrC,IAAI,EAAE,CAAC;QACT,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,MAAM,IAAI,SAAS,CAClB,2BAA2B,EAC3B,wBAAwB,EACxB,GAAG,CACH,CAAC;QACH,CAAC;QAED,sBAAsB;QACtB,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,MAAM,IAAI,SAAS,CAClB,2BAA2B,EAC3B,wBAAwB,EACxB,GAAG,CACH,CAAC;QACH,CAAC;QAED,wBAAwB;QACxB,MAAM,OAAO,GAAG;YACf,EAAE,EAAE,IAAI,CAAC,GAAG;YACZ,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACvB,CAAC;QAEF,uCAAuC;QACvC,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,CAAS,YAAY,CAAC,EAAE;YACjE,SAAS,EAAE,IAAI;SACf,CAAC,CAAC;QAEH,yCAAyC;QACzC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,WAAmB;QAC5C,IAAI,CAAC;YACJ,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CACzB,WAAW,EACX,MAAM,CAAC,GAAG,CAAC,YAAY,CAAW,CAClC,CAAC;YACF,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;gBACjC,OAAO,OAAO,CAAC;YAChB,CAAC;QACF,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,OAAO,KAAK,CAAC;QACd,CAAC;IACF,CAAC;CACD;AAED,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;AAEtC,eAAe,WAAW,CAAC","sourcesContent":["import { HttpError } from \"../middlewares/error.js\";\r\nimport User from \"../models/user.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport config from \"config\";\r\n\r\nclass AuthService {\r\n\tasync login(email: string, password: string) {\r\n\t\t// 1. Find user by email\r\n\t\tconst user = await User.findOne({ email: email.toLowerCase() })\r\n\t\t\t.populate(\"supervisor\")\r\n\t\t\t.populate(\"subordinates\")\r\n\t\t\t.populate(\"mentors\")\r\n\t\t\t.populate(\"mentees\")\r\n\t\t\t.populate(\"mentorshipRequests.sender\")\r\n\t\t\t.exec();\r\n\t\tif (!user) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Invalid email or password\",\r\n\t\t\t\t\"INVALID_EMAIL_PASSWORD\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// 2. Compare password\r\n\t\tconst isMatch = await bcrypt.compare(password, user.password);\r\n\t\tif (!isMatch) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Invalid email or password\",\r\n\t\t\t\t\"INVALID_EMAIL_PASSWORD\",\r\n\t\t\t\t401\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// 3. Create JWT payload\r\n\t\tconst payload = {\r\n\t\t\tid: user._id,\r\n\t\t\tname: user.name,\r\n\t\t\temail: user.email,\r\n\t\t\trole: user.role,\r\n\t\t\tposition: user.position,\r\n\t\t};\r\n\r\n\t\t// 4. Sign JWT token (expires in 1 day)\r\n\t\tconst token = jwt.sign(payload, config.get<string>(\"SECRET_KEY\"), {\r\n\t\t\texpiresIn: \"1d\",\r\n\t\t});\r\n\r\n\t\t// 5. Return token + user info (optional)\r\n\t\treturn { token, user };\r\n\t}\r\n\r\n\tasync validateAccessToken(accessToken: string) {\r\n\t\ttry {\r\n\t\t\tconst payload = jwt.verify(\r\n\t\t\t\taccessToken,\r\n\t\t\t\tconfig.get(\"SECRET_KEY\") as string\r\n\t\t\t);\r\n\t\t\tif (typeof payload !== \"string\") {\r\n\t\t\t\treturn payload;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst authService = new AuthService();\r\n\r\nexport default authService;\r\n"]}