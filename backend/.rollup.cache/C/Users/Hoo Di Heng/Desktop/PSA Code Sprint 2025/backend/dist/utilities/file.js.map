{"version":3,"file":"file.js","sourceRoot":"","sources":["../../utilities/file.ts"],"names":[],"mappings":"AAEA,MAAM,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,GACjE,MAAM,MAAM,CAAC,WAAW,CAAC,CAAC;AAE3B,gDAAgD;AAChD,MAAM,UAAU,uBAAuB,CAAC,SAAiB;IACxD,OAAO,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;AACzC,CAAC;AAED,MAAM,UAAU,6BAA6B,CAC5C,SAAiB,EACjB,QAAgB,EAChB,WAAmB,YAAY;IAE/B,MAAM,WAAW,GAAG,uBAAuB,CAAC,SAAS,CAAC,CAAC;IACvD,OAAO,IAAI,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,UAAU,iBAAiB,CAChC,WAAwB,EACxB,QAAgB,EAChB,WAAmB,YAAY;IAE/B,OAAO,IAAI,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,IAAU;IAC5C,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,GAAW,EAAE,IAAY,EAAE,EAAE;IACpE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IACnC,OAAO,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,MAAM,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,GAAW,EAAmB,EAAE;IACzE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IACnC,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAC/B,IAAmB,EAOlB,EAAE;IACH,IAAI,IAAI,YAAY,IAAI,EAAE,CAAC;QAC1B,OAAO,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IAChD,CAAC;SAAM,CAAC;QACP,OAAO,MAAM,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;AACF,CAAC,CAAC","sourcesContent":["import { isFile } from \"@common/types/file.js\";\r\n\r\nconst { fileTypeFromBuffer, fileTypeFromStream, fileTypeFromFile } =\r\n\tawait import(\"file-type\");\r\n\r\n// Deserialise a buffer object into array buffer\r\nexport function deserialiseBufferObject(bufferObj: Buffer): ArrayBuffer {\r\n\treturn new Uint8Array(bufferObj).buffer;\r\n}\r\n\r\nexport function deserialiseBufferObjectToFile(\r\n\tbufferObj: Buffer,\r\n\tfilename: string,\r\n\tmimeType: string = \"image/jpeg\"\r\n): File {\r\n\tconst arrayBuffer = deserialiseBufferObject(bufferObj);\r\n\treturn new File([arrayBuffer], filename, { type: mimeType });\r\n}\r\n\r\nexport function arrayBufferToFile(\r\n\tarrayBuffer: ArrayBuffer,\r\n\tfilename: string,\r\n\tmimeType: string = \"image/jpeg\"\r\n) {\r\n\treturn new File([arrayBuffer], filename, { type: mimeType });\r\n}\r\n\r\nexport async function fileToBuffer(file: File) {\r\n\treturn Buffer.from(await file.arrayBuffer());\r\n}\r\n\r\nexport const createFileFromUrl = async (url: string, slug: string) => {\r\n\tconst response = await fetch(url);\r\n\tconst blob = await response.blob();\r\n\treturn new File([blob], `${slug}.jpg`, { type: blob.type });\r\n};\r\n\r\nexport const createBufferFromUrl = async (url: string): Promise<Buffer> => {\r\n\tconst response = await fetch(url);\r\n\tconst blob = await response.blob();\r\n\treturn Buffer.from(await blob.arrayBuffer());\r\n};\r\n\r\nexport const getFileType = async (\r\n\tfile: File | Buffer\r\n): Promise<\r\n\t| {\r\n\t\t\tmime: string;\r\n\t\t\text: string;\r\n\t  }\r\n\t| undefined\r\n> => {\r\n\tif (file instanceof File) {\r\n\t\treturn await fileTypeFromStream(file.stream());\r\n\t} else {\r\n\t\treturn await fileTypeFromBuffer(file);\r\n\t}\r\n};\r\n"]}