{"version":3,"file":"s3.js","sourceRoot":"","sources":["../../controllers/s3.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAIlD,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAE3C,MAAM,YAAY;IACjB,KAAK,CAAC,YAAY,CAAC,OAAgB,EAAE,QAAkB;QACtD,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;QAE7C,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACzB,GAAG,EAAE,MAAM,SAAS,CAAC,oBAAoB,CACxC,UAAU,EACV,OAAO,EACP,KAAK,CACL;SACD,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,OAAgB,EAAE,QAAkB;QACxD,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,kBAAkB,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;QAEjE,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACzB,GAAG,EAAE,MAAM,SAAS,CAAC,oBAAoB,CACxC,UAAU,EACV,OAAO,EACP,KAAK,EACL,kBAAkB,CAClB;SACD,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,OAAgB,EAAE,QAAkB;QACtD,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;QAE7C,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACzB,GAAG,EAAE,MAAM,SAAS,CAAC,oBAAoB,CACxC,UAAU,EACV,OAAO,EACP,QAAQ,CACR;SACD,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,OAAgB,EAAE,QAAkB;QACtD,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;QAE7C,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACzB,GAAG,EAAE,SAAS,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC;SAChD,CAAC,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,OAAO;QAClB,OAAO,KAAK,EACX,OAAgB,EAChB,QAAkB,EAClB,IAAkB,EACjB,EAAE;YACH,IAAI,CAAC;gBACJ,MAAM,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAClC,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACd,yBAAyB;gBACzB,IAAI,GAAG,YAAY,SAAS,EAAE,CAAC;oBAC9B,wBAAwB;oBACxB,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACzC,OAAO;gBACR,CAAC;qBAAM,IACN,GAAG,YAAY,QAAQ,CAAC,KAAK,CAAC,qBAAqB;oBACnD,GAAG,YAAY,QAAQ,CAAC,KAAK,CAAC,eAAe,EAC5C,CAAC;oBACF,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;oBACpD,OAAO;gBACR,CAAC;qBAAM,CAAC;oBACP,yBAAyB;oBACzB,IAAI,CAAC,GAAG,CAAC,CAAC;gBACX,CAAC;YACF,CAAC;QACF,CAAC,CAAC;IACH,CAAC;CACD;AAED,MAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,eAAe,YAAY,CAAC","sourcesContent":["import { HttpError } from \"@common/types/http.js\";\r\nimport axios from \"axios\";\r\nimport config from \"config\";\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport s3Service from \"../utilities/s3.js\";\r\n\r\nclass S3Controller {\r\n\tasync getUploadURL(request: Request, response: Response) {\r\n\t\tconst { s3Filename, folders } = request.body;\r\n\r\n\t\tresponse.status(200).send({\r\n\t\t\turl: await s3Service.generatePresignedUrl(\r\n\t\t\t\ts3Filename,\r\n\t\t\t\tfolders,\r\n\t\t\t\t\"PUT\"\r\n\t\t\t),\r\n\t\t});\r\n\t}\r\n\r\n\tasync getDownloadURL(request: Request, response: Response) {\r\n\t\tconst { s3Filename, folders, contentDisposition } = request.body;\r\n\r\n\t\tresponse.status(200).send({\r\n\t\t\turl: await s3Service.generatePresignedUrl(\r\n\t\t\t\ts3Filename,\r\n\t\t\t\tfolders,\r\n\t\t\t\t\"GET\",\r\n\t\t\t\tcontentDisposition\r\n\t\t\t),\r\n\t\t});\r\n\t}\r\n\r\n\tasync getRemoveURL(request: Request, response: Response) {\r\n\t\tconst { s3Filename, folders } = request.body;\r\n\r\n\t\tresponse.status(200).send({\r\n\t\t\turl: await s3Service.generatePresignedUrl(\r\n\t\t\t\ts3Filename,\r\n\t\t\t\tfolders,\r\n\t\t\t\t\"DELETE\"\r\n\t\t\t),\r\n\t\t});\r\n\t}\r\n\r\n\tasync getPublicURL(request: Request, response: Response) {\r\n\t\tconst { s3Filename, folders } = request.body;\r\n\r\n\t\tresponse.status(200).send({\r\n\t\t\turl: s3Service.getPublicUrl(s3Filename, folders),\r\n\t\t});\r\n\t}\r\n\r\n\tcatchErrors(handler) {\r\n\t\treturn async (\r\n\t\t\trequest: Request,\r\n\t\t\tresponse: Response,\r\n\t\t\tnext: NextFunction\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tawait handler(request, response);\r\n\t\t\t} catch (err) {\r\n\t\t\t\t// Custom response errors\r\n\t\t\t\tif (err instanceof HttpError) {\r\n\t\t\t\t\t// Custom response error\r\n\t\t\t\t\tresponse.status(err.errorCode).send(err);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else if (\r\n\t\t\t\t\terr instanceof mongoose.Error.DocumentNotFoundError ||\r\n\t\t\t\t\terr instanceof mongoose.Error.ValidationError\r\n\t\t\t\t) {\r\n\t\t\t\t\tresponse.status(400).send({ message: err.message });\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Internal Server Errors\r\n\t\t\t\t\tnext(err);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n}\r\n\r\nconst s3Controller = new S3Controller();\r\nexport default s3Controller;\r\n"]}