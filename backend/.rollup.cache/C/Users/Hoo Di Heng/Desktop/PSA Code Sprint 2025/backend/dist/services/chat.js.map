{"version":3,"file":"chat.js","sourceRoot":"","sources":["../../services/chat.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpStatusCode } from \"@common/constants/statusCode.js\";\r\nimport { HttpError } from \"../middlewares/error.js\";\r\nimport Chat from \"../models/chat.js\";\r\nimport User from \"../models/user.js\";\r\nimport websocketService from \"../utilities/websocket.js\";\r\nimport userService from \"./user.js\";\r\nimport { Message } from \"@common/types/chat.js\";\r\n\r\nclass ChatService {\r\n\tasync getChatByID(chatID: string) {\r\n\t\tconst chat = await Chat.findById(chatID)\r\n\t\t\t.populate(\"participants\")\r\n\t\t\t.exec();\r\n\t\tif (!chat) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Chat not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\t\tchat.messages.sort(\r\n\t\t\t(a, b) => a.createdAt.getTime() - b.createdAt.getTime()\r\n\t\t);\r\n\r\n\t\treturn chat;\r\n\t}\r\n\r\n\tasync postMessage(\r\n\t\tchatID: string,\r\n\t\t{\r\n\t\t\tsender: senderID,\r\n\t\t\tcontent,\r\n\t\t\ttype = \"text\",\r\n\t\t\tmetadata = {},\r\n\t\t\tcreatedAt,\r\n\t\t}: {\r\n\t\t\tsender: string;\r\n\t\t\tcontent: string;\r\n\t\t\ttype?: Message[\"type\"];\r\n\t\t\tmetadata?: Record<string, any>;\r\n\t\t\tcreatedAt?: Date;\r\n\t\t}\r\n\t) {\r\n\t\tconst sender = await User.findById(senderID);\r\n\t\tif (!sender) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Sender not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst chat = await Chat.findById(chatID);\r\n\t\tif (!chat) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Chat not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst message = {\r\n\t\t\tsender: sender._id,\r\n\t\t\tcontent,\r\n\t\t\ttype,\r\n\t\t\tmetadata,\r\n\t\t\tcreatedAt: createdAt || new Date(),\r\n\t\t};\r\n\r\n\t\tchat.messages.push(message);\r\n\t\tawait chat.save();\r\n\r\n\t\tconst newMessage = chat.messages[chat.messages.length - 1];\r\n\r\n\t\tconst recipientID = chat.participants\r\n\t\t\t.filter((p) => !p.equals(sender._id))\r\n\t\t\t.pop()\r\n\t\t\t?.toString();\r\n\r\n\t\tif (!recipientID) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Recipient not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet notificationMsg = `${sender.name} sent you a message`;\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase \"file\":\r\n\t\t\t\tnotificationMsg = `${sender.name} shared a file`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"tip\":\r\n\t\t\t\tnotificationMsg = `${sender.name} shared a quick tip`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"quiz\":\r\n\t\t\t\tnotificationMsg = `${sender.name} started a quiz`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"poll\":\r\n\t\t\t\tnotificationMsg = `${sender.name} created a poll`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"feedback\":\r\n\t\t\t\tnotificationMsg = `${sender.name} gave you feedback`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"feedbackRequest\":\r\n\t\t\t\tnotificationMsg = `${sender.name} requested feedback`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"question\":\r\n\t\t\t\tnotificationMsg = `${sender.name} asked a question`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"moodUpdate\":\r\n\t\t\t\tnotificationMsg = `${sender.name} shared a mood update`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"wellbeingPrompt\":\r\n\t\t\t\tnotificationMsg = `Wellbeing check-in from ${sender.name}`;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tawait userService.addNotification(recipientID, notificationMsg);\r\n\r\n\t\twebsocketService.sendTo(recipientID, {\r\n\t\t\ttype: \"NEW_CHAT_MESSAGE\",\r\n\t\t\tdata: {\r\n\t\t\t\tchatID: chat._id,\r\n\t\t\t\tmessage: newMessage,\r\n\t\t\t},\r\n\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t});\r\n\r\n\t\treturn newMessage;\r\n\t}\r\n\r\n\tasync updateMessage(\r\n\t\tupdaterID: string,\r\n\t\tmessageID: string,\r\n\t\tchatID: string,\r\n\t\t{\r\n\t\t\tcontent,\r\n\t\t\ttype,\r\n\t\t\tmetadata,\r\n\t\t}: {\r\n\t\t\tcontent: string;\r\n\t\t\ttype?: Message[\"type\"];\r\n\t\t\tmetadata?: Record<string, any>;\r\n\t\t}\r\n\t) {\r\n\t\tconst chat = await Chat.findById(chatID);\r\n\t\tif (!chat) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Chat not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst message = chat.messages.id(messageID);\r\n\t\tif (!message) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Message not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tmessage.content = content;\r\n\t\tif (type) {\r\n\t\t\tmessage.type = type;\r\n\t\t}\r\n\t\tmessage.metadata = metadata;\r\n\t\tawait chat.save();\r\n\r\n\t\tconst recipientID = chat.participants\r\n\t\t\t.filter((p) => !p.equals(updaterID))\r\n\t\t\t.pop()\r\n\t\t\t?.toString();\r\n\r\n\t\tif (!recipientID) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Recipient not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\t\twebsocketService.sendTo(recipientID, {\r\n\t\t\ttype: \"CHAT_MESSAGE_UPDATE\",\r\n\t\t\tdata: {\r\n\t\t\t\tchatID: chat._id,\r\n\t\t\t\tmessage: chat.messages.id(messageID),\r\n\t\t\t},\r\n\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t});\r\n\t\treturn message;\r\n\t}\r\n\r\n\tasync createChat(participantIDs: string[]) {\r\n\t\tif (participantIDs.length !== 2) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Every chat must have 2 participants\",\r\n\t\t\t\t\"BAD_REQUEST\",\r\n\t\t\t\tHttpStatusCode.BadRequest\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst users = await User.find({ _id: { $in: participantIDs } });\r\n\t\tif (users.length !== 2) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"At least one of the participant IDs provided is not valid\",\r\n\t\t\t\t\"BAD_REQUEST\",\r\n\t\t\t\tHttpStatusCode.BadRequest\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst chat = new Chat({ participants: participantIDs });\r\n\t\tawait chat.save();\r\n\t\tawait chat.populate(\"participants\");\r\n\t\treturn chat;\r\n\t}\r\n\r\n\tasync markMessagesAsRead(chatID: string, userID: string) {\r\n\t\tconst updatedChat = await Chat.findByIdAndUpdate(\r\n\t\t\tchatID,\r\n\t\t\t{\r\n\t\t\t\t$set: {\r\n\t\t\t\t\t\"messages.$[msg].read\": true,\r\n\t\t\t\t\t\"messages.$[msg].readAt\": new Date(),\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tarrayFilters: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"msg.sender\": { $ne: userID },\r\n\t\t\t\t\t\t\"msg.read\": false,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t\tnew: true,\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t.populate(\"participants\")\r\n\t\t\t.exec();\r\n\t\tif (!updatedChat) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Chat not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst recipient = updatedChat.participants\r\n\t\t\t.filter((p) => !p._id?.equals(userID))\r\n\t\t\t.pop();\r\n\r\n\t\tif (!recipient) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Recipient not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\twebsocketService.sendTo(recipient._id.toString(), {\r\n\t\t\ttype: \"CHAT_MESSAGE_READ\",\r\n\t\t\tdata: updatedChat,\r\n\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t});\r\n\r\n\t\treturn updatedChat;\r\n\t}\r\n}\r\n\r\nexport const chatService = new ChatService();\r\nexport default chatService;\r\n"]}