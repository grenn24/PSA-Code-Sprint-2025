{"version":3,"file":"openai.js","sourceRoot":"","sources":["../../utilities/openai.ts"],"names":[],"mappings":"AAAA,2BAA2B;AAC3B,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,OAAO,YAAY;IAChB,MAAM,CAAS;IAEvB;QACC,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAS,gBAAgB,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACxD,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,IAAI,CACT,OAAe,EACf,YAAY,GAAG,wCAAwC;QAEvD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YAC1D,KAAK,EAAE,aAAa;YACpB,QAAQ,EAAE;gBACT,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE;gBACzC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE;aAClC;YACD,WAAW,EAAE,GAAG;YAChB,UAAU,EAAE,GAAG;SACf,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,OAAO,IAAI,EAAE,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,eAAe,CACpB,OAAe,EACf,YAAY,GAAG,wCAAwC,EACvD,OAAiB;QAEjB,MAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,GAAG,YAAY,iBAAiB,WAAW,aAAa,OAAO,EAAE,CAAC;QAEjF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YAC1D,KAAK,EAAE,aAAa;YACpB,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;YAC7C,WAAW,EAAE,GAAG;YAChB,UAAU,EAAE,GAAG;SACf,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,OAAO,IAAI,EAAE,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,IAAY;QAC9B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;YACpD,KAAK,EAAE,wBAAwB;YAC/B,KAAK,EAAE,IAAI;SACX,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACnC,CAAC;CACD;AAED,MAAM,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AAClC,eAAe,MAAM,CAAC","sourcesContent":["// services/OpenAIClient.ts\r\nimport { OpenAI } from \"openai\";\r\nimport config from \"config\";\r\n\r\nexport class OpenAIClient {\r\n\tprivate client: OpenAI;\r\n\r\n\tconstructor() {\r\n\t\tconst apiKey = config.get<string>(\"OPENAI_API_KEY\");\r\n\t\tif (!apiKey) {\r\n\t\t\tthrow new Error(\"OPENAI_API_KEY is not set in config\");\r\n\t\t}\r\n\r\n\t\tthis.client = new OpenAI({ apiKey });\r\n\t}\r\n\r\n\tasync chat(\r\n\t\tmessage: string,\r\n\t\tsystemPrompt = \"You are a friendly wellness assistant.\"\r\n\t) {\r\n\t\tconst response = await this.client.chat.completions.create({\r\n\t\t\tmodel: \"gpt-4-turbo\",\r\n\t\t\tmessages: [\r\n\t\t\t\t{ role: \"system\", content: systemPrompt },\r\n\t\t\t\t{ role: \"user\", content: message },\r\n\t\t\t],\r\n\t\t\ttemperature: 0.7,\r\n\t\t\tmax_tokens: 250,\r\n\t\t});\r\n\r\n\t\treturn response.choices[0].message?.content ?? \"\";\r\n\t}\r\n\r\n\tasync chatWithContext(\r\n\t\tmessage: string,\r\n\t\tsystemPrompt = \"You are a friendly wellness assistant.\",\r\n\t\tcontext: string[]\r\n\t) {\r\n\t\tconst contextText = context.join(\"\\n\");\r\n\t\tconst prompt = `${systemPrompt}\\n\\nContext:\\n${contextText}\\n\\nUser: ${message}`;\r\n\r\n\t\tconst response = await this.client.chat.completions.create({\r\n\t\t\tmodel: \"gpt-4-turbo\",\r\n\t\t\tmessages: [{ role: \"user\", content: prompt }],\r\n\t\t\ttemperature: 0.7,\r\n\t\t\tmax_tokens: 300,\r\n\t\t});\r\n\r\n\t\treturn response.choices[0].message?.content ?? \"\";\r\n\t}\r\n\r\n\tasync getEmbedding(text: string) {\r\n\t\tconst response = await this.client.embeddings.create({\r\n\t\t\tmodel: \"text-embedding-3-large\",\r\n\t\t\tinput: text,\r\n\t\t});\r\n\r\n\t\treturn response.data[0].embedding;\r\n\t}\r\n}\r\n\r\nconst openai = new OpenAIClient();\r\nexport default openai;\r\n"]}