{"version":3,"file":"openai.js","sourceRoot":"","sources":["../../utilities/openai.ts"],"names":[],"mappings":"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","sourcesContent":["// services/OpenAIClient.ts\r\nimport { OpenAI } from \"openai\";\r\nimport config from \"config\";\r\n\r\nexport class OpenAIClient {\r\n\tprivate client: OpenAI;\r\n\tprivate MODEL = \"gpt-4.1\";\r\n\tprivate TEMPERATURE = 0.7;\r\n\r\n\tconstructor() {\r\n\t\tconst apiKey = config.get<string>(\"OPENAI_API_KEY\");\r\n\t\tif (!apiKey) {\r\n\t\t\tthrow new Error(\"OPENAI_API_KEY is not set in config\");\r\n\t\t}\r\n\r\n\t\tthis.client = new OpenAI({ apiKey });\r\n\t}\r\n\r\n\tasync chat(\r\n\t\tmessage: string,\r\n\t\tsystemPrompt: string,\r\n\t\thistory: { role: \"user\" | \"assistant\"; content: string }[] = [],\r\n\t\tonDelta: (message: string) => void\r\n\t) {\r\n\t\tconst stream = await this.client.responses.create({\r\n\t\t\tmodel: this.MODEL,\r\n\t\t\tinput: [\r\n\t\t\t\t{ role: \"system\", content: systemPrompt },\r\n\t\t\t\t...history.map((m) => ({ role: m.role, content: m.content })),\r\n\t\t\t\t{ role: \"user\", content: message },\r\n\t\t\t],\r\n\t\t\ttemperature: this.TEMPERATURE,\r\n\t\t\tstream: true,\r\n\t\t});\r\n\t\tlet fullText = \"\";\r\n\r\n\t\tfor await (const event of stream) {\r\n\t\t\tif (event.type === \"response.output_text.delta\") {\r\n\t\t\t\tconst chunk = event.delta;\r\n\t\t\t\tfullText += chunk;\r\n\t\t\t\tif (onDelta) onDelta(chunk);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn fullText;\r\n\t}\r\n\r\n\tasync chatWithContext(\r\n\t\tmessage: string,\r\n\t\tsystemPrompt: string,\r\n\t\thistory: { role: \"user\" | \"assistant\"; content: string }[] = [],\r\n\t\tcontext: string,\r\n\t\tonDelta: (message: string) => void\r\n\t) {\r\n\t\tconst userMessage = `${systemPrompt}\\n\\nContext:\\n${context}\\n\\nUser: ${message}`;\r\n\t\tconst stream = await this.client.responses.create({\r\n\t\t\tmodel: this.MODEL,\r\n\t\t\tinput: [\r\n\t\t\t\t{ role: \"system\", content: systemPrompt },\r\n\t\t\t\t...history.map((m) => ({ role: m.role, content: m.content })),\r\n\t\t\t\t{ role: \"user\", content: userMessage },\r\n\t\t\t],\r\n\t\t\ttemperature: this.TEMPERATURE,\r\n\t\t\tstream: true,\r\n\t\t});\r\n\r\n\t\tlet fullText = \"\";\r\n\t\tfor await (const event of stream) {\r\n\t\t\tif (event.type === \"response.output_text.delta\") {\r\n\t\t\t\tconst chunk = event.delta;\r\n\t\t\t\tfullText += chunk;\r\n\t\t\t\tif (onDelta) onDelta(chunk);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn fullText;\r\n\t}\r\n\r\n\tasync getEmbedding(text: string) {\r\n\t\tconst response = await this.client.embeddings.create({\r\n\t\t\tmodel: \"text-embedding-3-large\",\r\n\t\t\tinput: text,\r\n\t\t});\r\n\r\n\t\treturn response.data[0].embedding;\r\n\t}\r\n\r\n\tasync getTitle(firstMessage: string) {\r\n\t\tconst response = await this.client.responses.create({\r\n\t\t\tmodel: this.MODEL,\r\n\t\t\tinput: [\r\n\t\t\t\t{\r\n\t\t\t\t\trole: \"system\",\r\n\t\t\t\t\tcontent:\r\n\t\t\t\t\t\t\"Generate a concise title for this conversation starter. Keep it under 6 words.\",\r\n\t\t\t\t},\r\n\t\t\t\t{ role: \"user\", content: firstMessage },\r\n\t\t\t],\r\n\t\t\ttemperature: this.TEMPERATURE,\r\n\t\t});\r\n\t\treturn response.output_text;\r\n\t}\r\n}\r\n\r\nconst openai = new OpenAIClient();\r\nexport default openai;\r\n"]}