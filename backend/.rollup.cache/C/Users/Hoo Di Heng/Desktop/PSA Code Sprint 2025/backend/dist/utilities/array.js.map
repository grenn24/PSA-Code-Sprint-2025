{"version":3,"file":"array.js","sourceRoot":"","sources":["../../utilities/array.ts"],"names":[],"mappings":"AAAA,sEAAsE;AACtE,MAAM,UAAU,eAAe,CAAC,KAAY,EAAE,aAAqB;IAClE,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,aAAa,CAAC,CAAC;IAC1E,OAAO,aAAa,CAAC;AACtB,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,KAAY,EAAE,MAAW;IAC/D,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC;IACnE,OAAO,aAAa,CAAC;AACtB,CAAC;AAED,MAAM,UAAU,aAAa,CAC5B,KAAU,EACV,MAAS,EACT,SAA6C;IAE7C,KAAK,MAAM,OAAO,IAAI,KAAK,EAAE,CAAC;QAC7B,IAAI,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACb,CAAC;IACF,CAAC;IACD,OAAO,KAAK,CAAC;AACd,CAAC","sourcesContent":["// Returns a new array with the element at the specified index removed\r\nexport function removeFromArray(array: any[], indexToRemove: number) {\r\n\tconst filteredArray = array.filter((_, index) => index !== indexToRemove);\r\n\treturn filteredArray;\r\n}\r\n\r\nexport function removeElementFromArray(array: any[], target: any) {\r\n\tconst filteredArray = array.filter((value, _) => value !== target);\r\n\treturn filteredArray;\r\n}\r\n\r\nexport function arrayContains<T,K>(\r\n\tarray: T[],\r\n\ttarget: K,\r\n\tpredicate: (element: T, target: K) => boolean\r\n) {\r\n\tfor (const element of array) {\r\n\t\tif (predicate(element, target)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n"]}