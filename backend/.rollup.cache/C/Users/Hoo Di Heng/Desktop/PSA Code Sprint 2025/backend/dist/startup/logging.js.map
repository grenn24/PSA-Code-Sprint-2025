{"version":3,"file":"logging.js","sourceRoot":"","sources":["../../startup/logging.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAEtD,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC;AAE9D,MAAM,OAAO,GAAG,GAAG,EAAE;IACpB,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;QACnC,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,CAAC;QACpC,UAAU,EAAE;YACX,IAAI,UAAU,CAAC,OAAO,CAAC;gBACtB,MAAM,EAAE,OAAO,CACd,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,EACvB,MAAM,CACL,CAAC,IAAI,EAAE,EAAE,CACR,GAAG,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC,OAAO,EAAE,CACrD,CACD;aACD,CAAC;YACF,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAC;SACjD;QACD,iBAAiB,EAAE;YAClB,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,qBAAqB,EAAE,CAAC;SACxD;QACD,iBAAiB,EAAE;YAClB,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,qBAAqB,EAAE,CAAC;SACxD;KACD,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QACpD,IAAI,MAAM,YAAY,KAAK,EAAE,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE;gBACpC,OAAO,EAAE,MAAM,CAAC,OAAO;gBACvB,KAAK,EAAE,MAAM,CAAC,KAAK;gBACnB,OAAO;aACP,CAAC,CAAC;QACJ,CAAC;aAAM,CAAC;YACP,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE;gBACpC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gBAC9B,OAAO;aACP,CAAC,CAAC;QACJ,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAC","sourcesContent":["import winston, { format, transports } from \"winston\";\r\n\r\nconst { combine, timestamp, colorize, printf, json } = format;\r\n\r\nconst logging = () => {\r\n\tconst logger = winston.createLogger({\r\n\t\tlevel: \"info\",\r\n\t\tformat: combine(timestamp(), json()),\r\n\t\ttransports: [\r\n\t\t\tnew transports.Console({\r\n\t\t\t\tformat: combine(\r\n\t\t\t\t\tcolorize({ all: true }),\r\n\t\t\t\t\tprintf(\r\n\t\t\t\t\t\t(info) =>\r\n\t\t\t\t\t\t\t`${info.timestamp} [${info.level}]: ${info.message}`\r\n\t\t\t\t\t)\r\n\t\t\t\t),\r\n\t\t\t}),\r\n\t\t\tnew transports.File({ filename: \"logs/app.log\" }),\r\n\t\t],\r\n\t\texceptionHandlers: [\r\n\t\t\tnew transports.File({ filename: \"logs/exceptions.log\" }),\r\n\t\t],\r\n\t\trejectionHandlers: [\r\n\t\t\tnew transports.File({ filename: \"logs/rejections.log\" }),\r\n\t\t],\r\n\t});\r\n\r\n\tprocess.on(\"unhandledRejection\", (reason, promise) => {\r\n\t\tif (reason instanceof Error) {\r\n\t\t\tlogger.error(\"Unhandled Rejection:\", {\r\n\t\t\t\tmessage: reason.message,\r\n\t\t\t\tstack: reason.stack,\r\n\t\t\t\tpromise,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tlogger.error(\"Unhandled Rejection:\", {\r\n\t\t\t\treason: JSON.stringify(reason),\r\n\t\t\t\tpromise,\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default logging;\r\n"]}