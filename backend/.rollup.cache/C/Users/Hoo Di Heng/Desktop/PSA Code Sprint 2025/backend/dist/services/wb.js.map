{"version":3,"file":"wb.js","sourceRoot":"","sources":["../../services/wb.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpStatusCode } from \"@common/constants/statusCode.js\";\r\nimport { HttpError } from \"../middlewares/error.js\";\r\nimport WBConversation from \"../models/wb.js\";\r\nimport openai from \"../utilities/openai.js\";\r\nimport { WBMessage } from \"@common/types/wb.js\";\r\nimport User from \"../models/user.js\";\r\nimport dayjs from \"dayjs\";\r\n\r\nclass WBService {\r\n\tprivate DEFAULT_SYSTEM_PROMPT = `\r\n\t\tYou are \"Wellness Buddy\", an empathetic, professional wellness assistant embedded in the PSA Horizon website. \r\n\t\tSpeak in a warm, encouraging, and non-judgmental tone.\r\n\r\n\t\tPrimary goal:\r\n\t\t- Provide concise, practical, and actionable advice to help in mental wellness, mindfulness, stress management, mood tracking, and general wellbeing of PSA's employees.\r\n\r\n\t\tReply structure & style:\r\n\t\t- Start with a brief empathetic acknowledgement of the user's concern.\r\n\t\t- Then offer concise recommendations using numbered steps or a short checklist.\r\n\t\t- Try include a single-line \"Quick takeaway\" or \"Next steps\" at the end.\r\n\t\t- When giving exercises, include explicit, time-bound actions (e.g., \"Try box breathing: in 4s, hold 4s, out 4s, for 2 minutes\").\r\n\t\t- Use plain language, avoid jargon, and be culturally and racially inclusive.\r\n\r\n\t\tClarifying & tailoring behavior:\r\n\t\t- If missing any essential details, ask up to 1-2 focused clarifying questions before providing a tailored response.\r\n\t\t- If the user requests deeper analysis, ask permission to use any available tools/resources first.\r\n\r\n\t\tArtifacts:\r\n\t\t- When helpful, produce small artifacts (checklists, short 3-step plans, brief worksheets, or a 7-day micro-plan). Keep artifacts copy-friendly.\r\n\r\n\t\tTools & privacy:\r\n\t\t- If you need to access user files, web search, or external services (Google Drive, etc.), **request explicit permission first**, and state exactly what you'll access and why.\r\n\t\t- Do not request or store unnecessary sensitive personal data (IDs, full medical records, exact addresses). If the user shares sensitive information, advise removing identifying details.\r\n\r\n\t\tSafety & limits:\r\n\t\t- Do not provide medical diagnoses or professional clinical advice.\r\n\t\t- If the user expresses suicidal ideation, self-harm intent, or harm to others, respond with immediate empathy, clearly state you are not a crisis service, encourage contacting emergency services or crisis hotlines, and advise seeking urgent professional help. If possible, offer local emergency numbers if the user shares their country.\r\n\t\t- Be transparent about limitations: e.g., \"I'm not a clinician — for diagnosis or urgent help, please consult a professional.\"\r\n\r\n\t\tBrand alignment:\r\n\t\t- Keep language calm, competent, and friendly — reflective of PSA Horizon's professional audience.\r\n\t\t- Occasionally reference \"PSA Horizon\" or \"Wellness Buddy\" when it reinforces clarity or trust.\r\n\r\n\t\tDo not reveal internal reasoning. Keep user experience focused, safe, and action-oriented.\r\n\t`;\r\n\r\n\tasync postMessage(\r\n\t\tconversationId: string,\r\n\t\tdata: {\r\n\t\t\tcontent: string;\r\n\t\t\ttimestamp: Date;\r\n\t\t},\r\n\t\tonDelta: (chunk: string) => void\r\n\t) {\r\n\t\tconst conversation = await WBConversation.findById(\r\n\t\t\tconversationId\r\n\t\t).exec();\r\n\r\n\t\tif (!conversation) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"Conversation not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst history = conversation.messages;\r\n\t\tconversation.messages.push({\r\n\t\t\trole: \"user\",\r\n\t\t\t...data,\r\n\t\t});\r\n\t\tconst response = await openai.chat(\r\n\t\t\tdata.content,\r\n\t\t\tthis.DEFAULT_SYSTEM_PROMPT,\r\n\t\t\thistory,\r\n\t\t\tonDelta\r\n\t\t);\r\n\t\tconversation.messages.push({\r\n\t\t\trole: \"assistant\",\r\n\t\t\tcontent: response,\r\n\t\t\ttimestamp: new Date(),\r\n\t\t});\r\n\t\tawait conversation.save();\r\n\r\n\t\treturn conversation;\r\n\t}\r\n\r\n\tasync postMessageStateless(\r\n\t\tdata: {\r\n\t\t\tcontent: string;\r\n\t\t\ttimestamp: Date;\r\n\t\t},\r\n\t\thistory: WBMessage[] = [],\r\n\t\tonDelta: (chunk: string) => void,\r\n\t\tsystemPrompt?: string\r\n\t) {\r\n\t\tconst response = await openai.chat(\r\n\t\t\tdata.content,\r\n\t\t\tsystemPrompt ?? this.DEFAULT_SYSTEM_PROMPT,\r\n\t\t\thistory,\r\n\t\t\tonDelta\r\n\t\t);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tasync trackMoodChanges(\r\n\t\tuserID: string,\r\n\t\tdata:\r\n\t\t\t| {\r\n\t\t\t\t\tcontent: string;\r\n\t\t\t\t\ttimestamp: Date;\r\n\t\t\t  }\r\n\t\t\t| undefined = undefined,\r\n\t\thistory: WBMessage[] = [],\r\n\t\tonDelta: (chunk: string) => void\r\n\t) {\r\n\t\tconst user = await User.findById(userID).exec();\r\n\t\tif (!user) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"User not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst serialisedMoods = JSON.stringify(\r\n\t\t\tuser.moods\r\n\t\t\t\t.sort((a, b) => a.date.getTime() - b.date.getTime())\r\n\t\t\t\t.slice(-30)\r\n\t\t\t\t.map((m) => ({\r\n\t\t\t\t\tdate: m.date.toISOString().split(\"T\")[0],\r\n\t\t\t\t\tlevel: m.level,\r\n\t\t\t\t}))\r\n\t\t);\r\n\t\tconst initialUserMessage = `\r\n\t\t\tYour task is to provide a friendly, empathetic summary of this user's mood trends, patterns, and insights. \r\n\t\t\tFor example: identify any dips, improvements, consistent moods, and give gentle advice if necessary. \r\n\t\t\tAlways keep a supportive and encouraging tone.\r\n\r\n\t\t\tImportant: Do NOT mention numeric mood levels. Instead, describe each mood in human-friendly terms. You can also use emojis if appropriate.\r\n\t\t\tYou may suggest seeking professional help if the user expresses suicidal ideation, self-harm intent arising from unpleasant moods like anxiety or depression.\r\n\r\n\t\t\tMood History:\r\n\t\t\t${serialisedMoods}\r\n\t\t\t`;\r\n\t\tconst userMessage = data?.content ?? initialUserMessage;\r\n\t\tconst response = await openai.chat(\r\n\t\t\tuserMessage,\r\n\t\t\tthis.DEFAULT_SYSTEM_PROMPT,\r\n\t\t\tdata?.content\r\n\t\t\t\t? [\r\n\t\t\t\t\t\t{ role: \"assistant\", content: initialUserMessage },\r\n\t\t\t\t\t\t...history,\r\n\t\t\t\t  ]\r\n\t\t\t\t: [],\r\n\t\t\tonDelta\r\n\t\t);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tasync getUnbiasedOpinion(\r\n\t\tdata: {\r\n\t\t\tcontent: string;\r\n\t\t\ttimestamp: Date;\r\n\t\t},\r\n\t\tonDelta: (chunk: string) => void\r\n\t) {\r\n\t\tconst userMessage = `\r\n\t\t\tYou are an impartial and thoughtful assistant. The user will ask a question or share a dilemma, and your task is to respond with an unbiased, balanced opinion.\r\n\r\n\t\t\tProvide a clear, reasoned response that considers multiple perspectives fairly. \r\n\t\t\t- Do not take extreme sides unless there is strong factual or ethical justification.  \r\n\t\t\t- Avoid emotionally charged or judgmental language.  \r\n\t\t\t- If relevant, briefly outline the pros and cons of each viewpoint before summarizing your neutral stance.  \r\n\t\t\t- Maintain a calm, respectful, and rational tone throughout.\r\n\r\n\t\t\tQuestion:\r\n\t\t\t${data.content}`;\r\n\r\n\t\tconst response = await openai.chat(\r\n\t\t\tuserMessage,\r\n\t\t\tthis.DEFAULT_SYSTEM_PROMPT,\r\n\t\t\t[],\r\n\t\t\tonDelta\r\n\t\t);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tasync dailyCheckIn(\r\n\t\tdata: {\r\n\t\t\tcontent: string;\r\n\t\t\ttimestamp: Date;\r\n\t\t},\r\n\t\tonDelta: (chunk: string) => void\r\n\t) {\r\n\tconst userMessage = `\r\n\t\tYou are a thoughtful and impartial assistant. The user has shared their current mood or feelings. \r\n\t\tYour task is to suggest a **single, relevant follow-up question** that encourages the user to reflect further on their mood or experience.\r\n\r\n\t\tGuidelines:\r\n\t\t- The question should be open-ended and supportive.\r\n\t\t- Avoid judgmental or leading questions.\r\n\t\t- Keep it empathetic, gentle, and neutral in tone.\r\n\t\t- The question should relate naturally to what the user just shared.\r\n\r\n\t\tUser's Mood / Reflection:\r\n\t\t${data.content}\r\n\r\n\t\tPlease respond **only with the follow-up question**, nothing else.\r\n\t\t`;\r\n\r\n\t\tconst response = await openai.chat(\r\n\t\t\tuserMessage,\r\n\t\t\tthis.DEFAULT_SYSTEM_PROMPT,\r\n\t\t\t[],\r\n\t\t\tonDelta\r\n\t\t);\r\n\t\treturn response;\r\n\t}\r\n\r\n\tasync getUsefulTips(userID: string) {\r\n\t\tconst user = await User.findById(userID).exec();\r\n\t\tif (!user) {\r\n\t\t\tthrow new HttpError(\r\n\t\t\t\t\"User not found\",\r\n\t\t\t\t\"NOT_FOUND\",\r\n\t\t\t\tHttpStatusCode.NotFound\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst userProfile = `\r\n\t\t\tName: ${user.name}\r\n\t\t\tPosition: ${user.position}\r\n\t\t\tExperience Level: ${user.experienceLevel}\r\n\t\t\tBio: ${user.bio ?? \"N/A\"}\r\n\t\t\tSkills: ${\r\n\t\t\t\tuser.skills\r\n\t\t\t\t\t.map((s) => `${s.name} (level ${s.level})`)\r\n\t\t\t\t\t.join(\", \") || \"N/A\"\r\n\t\t\t}\r\n\t\t\tCareer Path: ${\r\n\t\t\t\tuser.careerPath\r\n\t\t\t\t\t.map((c) => `${c.position} (${c.progress}%)`)\r\n\t\t\t\t\t.join(\", \") || \"N/A\"\r\n\t\t\t}\r\n\t\t\tRecent Mood Trends: ${\r\n\t\t\t\tuser.moods.length > 0\r\n\t\t\t\t\t? user.moods\r\n\t\t\t\t\t\t\t.slice(-10)\r\n\t\t\t\t\t\t\t.map(\r\n\t\t\t\t\t\t\t\t(m) =>\r\n\t\t\t\t\t\t\t\t\t`${new Date(\r\n\t\t\t\t\t\t\t\t\t\tm.date\r\n\t\t\t\t\t\t\t\t\t).toLocaleDateString()}: ${m.level} (${\r\n\t\t\t\t\t\t\t\t\t\tm.notes ?? \"N/A\"\r\n\t\t\t\t\t\t\t\t\t})`\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t.join(\"; \")\r\n\t\t\t\t\t: \"No recent moods recorded\"\r\n\t\t\t}\r\n\t\t\t`;\r\n\r\n\t\tconst prompt = `\r\n\t\t\tYou are a wellness assistant for PSA employees. \r\n\t\t\tBased on the user's profile and current time ${dayjs().format(\r\n\t\t\t\t\"HH:mm\"\r\n\t\t\t)}, provide **10 friendly, practical, and relatable \"Tip of the Moment\"s\"** that the user can apply in their daily work routine to improve wellness, focus, or mental health.\r\n\r\n\t\t\t- Each tip must be in JSON format: { \"text\": \"...\", \"category\": \"...\", \"image\": \"...\" }.\r\n\t\t\t- Category should be one of: \"Physical\", \"Mental\", \"Focus\", \"Hydration\", or \"Ergonomics\".\r\n\t\t\t- Image should be a realistic URL (can be placeholder images for now, e.g., from unsplash.com).\r\n\t\t\t- Keep the tone friendly, encouraging, and concise.\r\n\t\t\t- Avoid numeric mood levels; focus on actionable advice.\r\n\r\n\t\t\tUser Info:\r\n\t\t\t${userProfile}\r\n\r\n\t\t\tReturn only a JSON array of 15 tip objects.\r\n\t\t\t`;\r\n\r\n\t\tconst response = await openai.chat(\r\n\t\t\tprompt,\r\n\t\t\tthis.DEFAULT_SYSTEM_PROMPT,\r\n\t\t\t[],\r\n\t\t\tundefined\r\n\t\t);\r\n\r\n\t\tlet jsonString = response\r\n\t\t\t.trim()\r\n\t\t\t.replace(/^```json\\s*/, \"\")\r\n\t\t\t.replace(/^```\\s*/, \"\")\r\n\t\t\t.replace(/```$/, \"\");\r\n\r\n\t\tlet tips: { text: string; category: string; image: string }[] = [];\r\n\t\ttry {\r\n\t\t\ttips = JSON.parse(jsonString);\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(\"Failed to parse tips from OpenAI:\", err);\r\n\t\t}\r\n\r\n\t\treturn tips;\r\n\t}\r\n\r\n\tasync createConversation(\r\n\t\tuserID: string,\r\n\t\tdata?: {\r\n\t\t\tcontent: string;\r\n\t\t\ttimestamp: Date;\r\n\t\t}\r\n\t) {\r\n\t\tconst wbConversation = await WBConversation.create({\r\n\t\t\tuser: userID,\r\n\t\t\tmessages: [],\r\n\t\t});\r\n\t\tif (data) {\r\n\t\t\tconst title = await openai.getTitle(data.content);\r\n\t\t\twbConversation.title = title;\r\n\t\t}\r\n\t\tawait wbConversation.save();\r\n\t\treturn wbConversation;\r\n\t}\r\n}\r\n\r\nconst wbService = new WBService();\r\nexport default wbService;\r\n"]}